<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quantum Journey</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/tween.js/18.6.4/tween.umd.js"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
            background-color: #1a1a1a;
            color: #fff;
        }
        #canvas {
            display: block;
        }
        #info {
            position: absolute;
            top: 0;
            left: 0;
            width: 300px;
            background-color: rgba(0, 0, 0, 0.8);
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.5);
            z-index: 10;
        }
        #controls {
            position: absolute;
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            display: flex;
            gap: 10px;
            z-index: 10;
        }
        button {
            background-color: #3498db;
            border: none;
            color: white;
            padding: 10px 20px;
            cursor: pointer;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #2980b9;
        }
        .close-btn {
            cursor: pointer;
            color: #e74c3c;
            float: right;
            font-size: 20px;
        }
        #explanation {
            display: none;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <canvas id="canvas"></canvas>
    <div id="info">
        <h2>Quantum Mechanics Journey</h2>
        <p><span id="current-concept"></span></p>
        <div id="explanation">
            <span class="close-btn">Ã—</span>
            <h3 id="explanation-title"></h3>
            <p id="explanation-content"></p>
        </div>
    </div>
    <div id="controls">
        <button id="prev-btn">Previous</button>
        <button id="next-btn">Next</button>
        <button id="explain-btn">Explain</button>
    </div>

    <script>
        const concepts = [
            {
                name: "Superposition",
                scene: createSuperpositionScene,
                explanation: "Superposition is a fundamental principle of quantum mechanics where a quantum system can exist in multiple states simultaneously until measured."
            },
            {
                name: "Entanglement",
                scene: createEntanglementScene,
                explanation: "Quantum entanglement is a phenomenon where two or more particles are connected in such a way that the quantum state of each particle cannot be described independently of the others."
            },
            {
                name: "Wave-Particle Duality",
                scene: createWaveParticleScene,
                explanation: "Wave-particle duality suggests that every particle or quantum entity can be described as either a particle or a wave, exhibiting properties of both."
            },
            {
                name: "Uncertainty Principle",
                scene: createUncertaintyScene,
                explanation: "The Heisenberg Uncertainty Principle states that we cannot simultaneously know the exact position and momentum of a particle with arbitrary precision."
            },
            {
                name: "Quantum Tunneling",
                scene: createTunnelingScene,
                explanation: "Quantum tunneling is the quantum mechanical phenomenon where a particle tunnels through a barrier that it classically could not surmount."
            },
            {
                name: "Quantum Decoherence",
                scene: createDecoherenceScene,
                explanation: "Quantum decoherence is the loss of quantum coherence, which explains how quantum systems interact with their environment, leading to classical behavior."
            },
            {
                name: "Many-Worlds Interpretation",
                scene: createManyWorldsScene,
                explanation: "The Many-Worlds Interpretation suggests that all possible alternate histories and futures are real, each representing an actual world or parallel universe."
            },
            {
                name: "Quantum Computing",
                scene: createQuantumComputingScene,
                explanation: "Quantum computing utilizes quantum-mechanical phenomena to perform operations on data, potentially solving certain problems much faster than classical computers."
            },
            {
                name: "Quantum Field Theory",
                scene: createQuantumFieldScene,
                explanation: "Quantum Field Theory combines quantum mechanics and special relativity to explain the behavior of subatomic particles and fundamental forces."
            },
            {
                name: "Quantum Gravity",
                scene: createQuantumGravityScene,
                explanation: "Quantum Gravity is the theoretical framework attempting to reconcile quantum mechanics with Einstein's theory of general relativity."
            }
        ];

        let currentConceptIndex = 0;
        let scene, camera, renderer, controls;
        let currentAnimation = null;

        function init() {
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            camera.position.z = 5;

            renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('canvas'), antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);

            window.addEventListener('resize', onWindowResize, false);

            updateScene();
            animate();

            document.getElementById('prev-btn').addEventListener('click', prevConcept);
            document.getElementById('next-btn').addEventListener('click', nextConcept);
            document.getElementById('explain-btn').addEventListener('click', showExplanation);
            document.querySelector('.close-btn').addEventListener('click', hideExplanation);
        }

        function updateScene() {
            scene.clear();
            const concept = concepts[currentConceptIndex];
            document.getElementById('current-concept').textContent = concept.name;
            concept.scene();
        }

        function animate() {
            requestAnimationFrame(animate);
            if (currentAnimation) {
                currentAnimation();
            }
            TWEEN.update();
            renderer.render(scene, camera);
        }

        function onWindowResize() {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        }

        function prevConcept() {
            currentConceptIndex = (currentConceptIndex - 1 + concepts.length) % concepts.length;
            updateScene();
        }

        function nextConcept() {
            currentConceptIndex = (currentConceptIndex + 1) % concepts.length;
            updateScene();
        }

        function showExplanation() {
            const concept = concepts[currentConceptIndex];
            document.getElementById('explanation-title').textContent = concept.name;
            document.getElementById('explanation-content').textContent = concept.explanation;
            document.getElementById('explanation').style.display = 'block';
        }

        function hideExplanation() {
            document.getElementById('explanation').style.display = 'none';
        }

        // Concept Scenes

        function createSuperpositionScene() {
            const geometry = new THREE.SphereGeometry(1, 32, 32);
            const material = new THREE.MeshBasicMaterial({ color: 0xffffff, wireframe: true });
            const sphere = new THREE.Mesh(geometry, material);
            scene.add(sphere);

            new TWEEN.Tween(sphere.scale)
                .to({ x: 1.5, y: 1.5, z: 1.5 }, 1000)
                .yoyo(true)
                .repeat(Infinity)
                .start();

            const particles = new THREE.Points(
                new THREE.BufferGeometry(),
                new THREE.PointsMaterial({ color: 0x00ffff, size: 0.05 })
            );
            const particlePositions = new Float32Array(1000 * 3);
            for (let i = 0; i < 1000; i++) {
                const x = (Math.random() - 0.5) * 5;
                const y = (Math.random() - 0.5) * 5;
                const z = (Math.random() - 0.5) * 5;
                particlePositions[i * 3] = x;
                particlePositions[i * 3 + 1] = y;
                particlePositions[i * 3 + 2] = z;
            }
            particles.geometry.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3));
            scene.add(particles);

            currentAnimation = () => {
                particles.rotation.y += 0.002;
            };
        }

        function createEntanglementScene() {
            const geometry = new THREE.TorusKnotGeometry(1, 0.3, 100, 16);
            const material = new THREE.MeshBasicMaterial({ color: 0xff00ff, wireframe: true });
            const torusKnot = new THREE.Mesh(geometry, material);
            scene.add(torusKnot);

            const particles1 = createParticleSystem(0xff0000);
            const particles2 = createParticleSystem(0x0000ff);
            scene.add(particles1);
            scene.add(particles2);

            currentAnimation = () => {
                torusKnot.rotation.x += 0.01;
                torusKnot.rotation.y += 0.01;
                particles1.rotation.x += 0.005;
                particles2.rotation.y += 0.005;
            };
        }

        function createWaveParticleScene() {
            const waveGeometry = new THREE.BufferGeometry();
            const waveMaterial = new THREE.LineBasicMaterial({ color: 0xffff00 });
            const wavePoints = [];
            for (let i = 0; i <= 100; i++) {
                wavePoints.push(new THREE.Vector3(i / 10 - 5, Math.sin(i / 10) * 0.5, 0));
            }
            waveGeometry.setFromPoints(wavePoints);
            const wave = new THREE.Line(waveGeometry, waveMaterial);
            scene.add(wave);

            const particleGeometry = new THREE.SphereGeometry(0.1, 32, 32);
            const particleMaterial = new THREE.MeshBasicMaterial({ color: 0x00ffff });
            const particle = new THREE.Mesh(particleGeometry, particleMaterial);
            scene.add(particle);

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                particle.position.x = Math.sin(time) * 2;
                particle.position.y = Math.cos(time) * 0.5;
            };
        }

        function createUncertaintyScene() {
            const gridHelper = new THREE.GridHelper(10, 10, 0x444444, 0x444444);
            scene.add(gridHelper);

            const particleGeometry = new THREE.SphereGeometry(0.1, 32, 32);
            const particleMaterial = new THREE.MeshBasicMaterial({ color: 0xff00ff });
            const particle = new THREE.Mesh(particleGeometry, particleMaterial);
            scene.add(particle);

            const blurGeometry = new THREE.SphereGeometry(0.5, 32, 32);
            const blurMaterial = new THREE.MeshBasicMaterial({ color: 0xff00ff, transparent: true, opacity: 0.2 });
            const blur = new THREE.Mesh(blurGeometry, blurMaterial);
            scene.add(blur);

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                particle.position.x = Math.sin(time) * 2;
                particle.position.y = Math.cos(time * 1.5) * 2;
                blur.position.copy(particle.position);
                blur.scale.setScalar(1 + Math.sin(time * 2) * 0.5);
            };
        }

        function createTunnelingScene() {
            const barrierGeometry = new THREE.BoxGeometry(0.5, 3, 1);
            const barrierMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
            const barrier = new THREE.Mesh(barrierGeometry, barrierMaterial);
            scene.add(barrier);

            const particleGeometry = new THREE.SphereGeometry(0.1, 32, 32);
            const particleMaterial = new THREE.MeshBasicMaterial({ color: 0x00ffff });
            const particle = new THREE.Mesh(particleGeometry, particleMaterial);
            particle.position.x = -3;
            scene.add(particle);

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                particle.position.x = -3 + time % 6;
                if (particle.position.x > 3) {
                    particle.position.x = -3;
                }
                if (Math.abs(particle.position.x) < 0.25) {
                    particle.material.opacity = 0.5;
                } else {
                    particle.material.opacity = 1;
                }
            };
        }

        function createDecoherenceScene() {
            const waveGeometry = new THREE.BufferGeometry();
            const waveMaterial = new THREE.LineBasicMaterial({ color: 0x00ff00 });
            const wavePoints = [];
            for (let i = 0; i <= 100; i++) {
                wavePoints.push(new THREE.Vector3(i / 10 - 5, Math.sin(i / 5) * 0.5, 0));
            }
            waveGeometry.setFromPoints(wavePoints);
            const wave = new THREE.Line(waveGeometry, waveMaterial);
            scene.add(wave);

            const particles = createParticleSystem(0xff0000, 100);
            scene.add(particles);

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                wave.geometry.attributes.position.array.forEach((value, index) => {
                    if (index % 3 === 1) {
                        wave.geometry.attributes.position.array[index] = Math.sin((index / 3) / 5 + time) * 0.5 * Math.exp(-time * 0.1);
                    }
                });
                wave.geometry.attributes.position.needsUpdate = true;
                particles.rotation.y += 0.01;
            };
        }

        function createManyWorldsScene() {
            const worldGeometry = new THREE.SphereGeometry(0.5, 32, 32);
            const worldMaterials = [
                new THREE.MeshBasicMaterial({ color: 0xff0000 }),
                new THREE.MeshBasicMaterial({ color: 0x00ff00 }),
                new THREE.MeshBasicMaterial({ color: 0x0000ff }),
                new THREE.MeshBasicMaterial({ color: 0xffff00 }),
                new THREE.MeshBasicMaterial({ color: 0xff00ff })
            ];

            const worlds = [];
            for (let i = 0; i < 5; i++) {
                const world = new THREE.Mesh(worldGeometry, worldMaterials[i]);
                world.position.set(Math.cos(i * Math.PI * 0.4) * 2, Math.sin(i * Math.PI * 0.4) * 2, 0);
                scene.add(world);
                worlds.push(world);
            }

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                worlds.forEach((world, index) => {
                    world.position.x = Math.cos(time + index * Math.PI * 0.4) * 2;
                    world.position.y = Math.sin(time + index * Math.PI * 0.4) * 2;
                    world.rotation.y += 0.01;
                });
            };
        }

        function createQuantumComputingScene() {
            const qubitGeometry = new THREE.SphereGeometry(0.2, 32, 32);
            const qubitMaterial = new THREE.MeshBasicMaterial({ color: 0x00ffff });
            const qubits = [];

            for (let i = 0; i < 8; i++) {
                const qubit = new THREE.Mesh(qubitGeometry, qubitMaterial);
                qubit.position.set((i % 4) - 1.5, Math.floor(i / 4) - 0.5, 0);
                scene.add(qubit);
                qubits.push(qubit);
            }

            const lineMaterial = new THREE.LineBasicMaterial({ color: 0xffffff });

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                qubits.forEach((qubit, index) => {
                    qubit.scale.setScalar(1 + 0.2 * Math.sin(time * 2 + index));
                    qubit.material.color.setHSL((time * 0.1 + index * 0.1) % 1, 1, 0.5);
                });

                scene.children.forEach(child => {
                    if (child instanceof THREE.Line) {
                        scene.remove(child);
                    }
                });

                for (let i = 0; i < qubits.length; i++) {
                    for (let j = i + 1; j < qubits.length; j++) {
                        if (Math.random() < 0.3) {
                            const lineGeometry = new THREE.BufferGeometry().setFromPoints([
                                qubits[i].position,
                                qubits[j].position
                            ]);
                            const line = new THREE.Line(lineGeometry, lineMaterial);
                            scene.add(line);
                        }
                    }
                }
            };
        }

        function createQuantumFieldScene() {
            const fieldGeometry = new THREE.PlaneGeometry(10, 10, 50, 50);
            const fieldMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00, wireframe: true });
            const field = new THREE.Mesh(fieldGeometry, fieldMaterial);
            field.rotation.x = -Math.PI / 2;
            scene.add(field);

            const particleGeometry = new THREE.SphereGeometry(0.05, 32, 32);
            const particleMaterial = new THREE.MeshBasicMaterial({ color: 0xffff00 });
            const particles = [];

            for (let i = 0; i < 50; i++) {
                const particle = new THREE.Mesh(particleGeometry, particleMaterial);
                particle.position.set(
                    (Math.random() - 0.5) * 10,
                    Math.random() * 2,
                    (Math.random() - 0.5) * 10
                );
                scene.add(particle);
                particles.push(particle);
            }

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                field.geometry.attributes.position.array.forEach((value, index) => {
                    if (index % 3 === 1) {
                        const x = field.geometry.attributes.position.array[index - 1];
                        const z = field.geometry.attributes.position.array[index + 1];
                        field.geometry.attributes.position.array[index] = Math.sin(x + time) * Math.cos(z + time) * 0.5;
                    }
                });
                field.geometry.attributes.position.needsUpdate = true;

                particles.forEach(particle => {
                    particle.position.y = 1 + Math.sin(particle.position.x + time) * Math.cos(particle.position.z + time) * 0.5;
                });
            };
        }

        function createQuantumGravityScene() {
            const blackHoleGeometry = new THREE.SphereGeometry(1, 32, 32);
            const blackHoleMaterial = new THREE.MeshBasicMaterial({ color: 0x000000 });
            const blackHole = new THREE.Mesh(blackHoleGeometry, blackHoleMaterial);
            scene.add(blackHole);

            const accretionDiskGeometry = new THREE.TorusGeometry(1.5, 0.3, 16, 100);
            const accretionDiskMaterial = new THREE.MeshBasicMaterial({ color: 0xff6600, side: THREE.DoubleSide });
            const accretionDisk = new THREE.Mesh(accretionDiskGeometry, accretionDiskMaterial);
            accretionDisk.rotation.x = Math.PI / 2;
            scene.add(accretionDisk);

            const particles = createParticleSystem(0xffffff, 1000);
            scene.add(particles);

            currentAnimation = () => {
                const time = Date.now() * 0.001;
                accretionDisk.rotation.z += 0.01;
                particles.rotation.y += 0.002;

                particles.geometry.attributes.position.array.forEach((value, index) => {
                    const i = Math.floor(index / 3);
                    const offset = i * 3;
                    const x = particles.geometry.attributes.position.array[offset];
                    const y = particles.geometry.attributes.position.array[offset + 1];
                    const z = particles.geometry.attributes.position.array[offset + 2];
                    const distance = Math.sqrt(x * x + y * y + z * z);

                    if (distance < 1.5) {
                        particles.geometry.attributes.position.array[offset] = (Math.random() - 0.5) * 10;
                        particles.geometry.attributes.position.array[offset + 1] = (Math.random() - 0.5) * 10;
                        particles.geometry.attributes.position.array[offset + 2] = (Math.random() - 0.5) * 10;
                    } else {
                        const factor = 1 - 0.1 / distance;
                        particles.geometry.attributes.position.array[offset] *= factor;
                        particles.geometry.attributes.position.array[offset + 1] *= factor;
                        particles.geometry.attributes.position.array[offset + 2] *= factor;
                    }
                });
                particles.geometry.attributes.position.needsUpdate = true;
            };
        }

        function createParticleSystem(color, count = 1000) {
            const particles = new THREE.Points(
                new THREE.BufferGeometry(),
                new THREE.PointsMaterial({ color: color, size: 0.05 })
            );
            const particlePositions = new Float32Array(count * 3);
            for (let i = 0; i < count; i++) {
                const x = (Math.random() - 0.5) * 5;
                const y = (Math.random() - 0.5) * 5;
                const z = (Math.random() - 0.5) * 5;
                particlePositions[i * 3] = x;
                particlePositions[i * 3 + 1] = y;
                particlePositions[i * 3 + 2] = z;
            }
            particles.geometry.setAttribute('position', new THREE.BufferAttribute(particlePositions, 3));
            return particles;
        }

        init();
    </script>

</body>
</html>
