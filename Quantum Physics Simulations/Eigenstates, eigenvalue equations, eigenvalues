<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quantum States Visualization</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.4.0/p5.js"></script>
  <style>
    body {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      background-color: #222;
      color: white;
    }
    canvas {
      border: 1px solid white;
    }
    .info {
      position: absolute;
      top: 10px;
      left: 10px;
      color: white;
      font-family: sans-serif;
    }
    #description {
      position: absolute;
      bottom: 10px;
      left: 10px;
      width: 760px;
      color: white;
      font-family: sans-serif;
      font-size: 16px;
    }
  </style>
</head>
<body>
<div class="info">
  <p><strong>Quantum States Visualization</strong></p>
  <p>Use the buttons to navigate through the scenes.</p>
</div>
<div id="description"></div>
<script>
let scene = 0;
let buttonNext, buttonPrev;
let slider;
let rotationAngle = 0;
let descriptionDiv;

function setup() {
  createCanvas(800, 480, WEBGL);
  
  buttonNext = createButton('Next');
  buttonNext.position(700, 550);
  buttonNext.mousePressed(nextScene);
  
  buttonPrev = createButton('Previous');
  buttonPrev.position(600, 550);
  buttonPrev.mousePressed(prevScene);
  
  slider = createSlider(0, 100, 50);
  slider.position(50, 550);
  slider.hide();
  
  descriptionDiv = select('#description'); // Select the description div
}

function draw() {
  background(255);
  
  // Rotate only the 3D objects
  push();
  rotateX(rotationAngle);
  rotateY(rotationAngle * 0.7);
  rotateZ(rotationAngle * 0.3);
  
  switch(scene) {
    case 0:
      introductionScene();
      break;
    case 1:
      observableStatesScene();
      break;
    case 2:
      eigenstatesScene();
      break;
    case 3:
      eigenvalueEquationScene();
      break;
    case 4:
      eigenvaluesScene();
      break;
    case 5:
      measurementScene();
      break;
    case 6:
      examplesScene();
      break;
    case 7:
      conclusionScene();
      break;
  }
  
  pop();
  
  rotationAngle += 0.01;
  
  // Display the text descriptions
  displayDescription();
}

function nextScene() {
  if (scene < 7) scene++;
}

function prevScene() {
  if (scene > 0) scene--;
}

function introductionScene() {
  // 3D objects for the introduction scene
}

function observableStatesScene() {
  push();
  translate(0, 0, 100);
  fill(255, 0, 0);
  sphere(50);
  pop();
}

function eigenstatesScene() {
  push();
  translate(-200, 0, 0);
  fill(0, 255, 0);
  sphere(30);
  pop();
  
  push();
  fill(0, 0, 255);
  sphere(30);
  pop();
  
  push();
  translate(200, 0, 0);
  fill(255, 255, 0);
  sphere(30);
  pop();
}

function eigenvalueEquationScene() {
  push();
  translate(0, 0, 0);
  fill(255);
  box(100);
  pop();
}

function eigenvaluesScene() {
  push();
  translate(-200, 0, 0);
  fill(255, 0, 0);
  box(50);
  pop();
  
  push();
  fill(0, 255, 0);
  box(50);
  pop();
  
  push();
  translate(200, 0, 0);
  fill(0, 0, 255);
  box(50);
  pop();
}

function measurementScene() {
  push();
  translate(-200, 0, 0);
  fill(255, 0, 0);
  box(50);
  pop();
  
  push();
  fill(0, 255, 0);
  box(50);
  pop();
  
  push();
  translate(200, 0, 0);
  fill(0, 0, 255);
  box(50);
  pop();
  
  let measuredState = int(random(1, 4));
  if (measuredState == 1) {
    push();
    translate(-200, 0, 0);
    fill(255, 255, 0);
    box(60);
    pop();
  } else if (measuredState == 2) {
    push();
    fill(255, 255, 0);
    box(60);
    pop();
  } else {
    push();
    translate(200, 0, 0);
    fill(255, 255, 0);
    box(60);
    pop();
  }
}

function examplesScene() {
  push();
  translate(-200, 0, 0);
  fill(255, 0, 0);
  box(40);
  pop();
  
  push();
  fill(0, 255, 0);
  box(40);
  pop();
  
  push();
  translate(200, 0, 0);
  fill(0, 0, 255);
  box(40);
  pop();
  
  push();
  translate(-200, 200, 0);
  fill(255, 0, 0);
  sphere(30);
  pop();
  
  push();
  translate(0, 200, 0);
  fill(0, 255, 0);
  sphere(30);
  pop();
  
  push();
  translate(200, 200, 0);
  fill(0, 0, 255);
  sphere(30);
  pop();
}

function conclusionScene() {
  // 3D objects for the conclusion scene
}

function displayDescription() {
  let description = '';
  switch(scene) {
    case 0:
      description = "<strong>Introduction to Quantum States and Measurements</strong><br>In this visualization, we will explore key concepts in quantum physics such as observable states, eigenstates, eigenvalue equations, eigenvalues, and measurement.";
      break;
    case 1:
      description = "<strong>Observable States</strong><br>Observable states are measurable properties of a quantum system. They are represented by eigenstates and determined by eigenvalue equations.";
      break;
    case 2:
      description = "<strong>Eigenstates</strong><br>Eigenstates are specific states of a quantum system. They are obtained as solutions to eigenvalue equations and represent observable states of the system.";
      break;
    case 3:
      description = "<strong>Eigenvalue Equation</strong><br>The eigenvalue equation is a mathematical equation that relates eigenstates and eigenvalues. It is often referred to as the wave equation.";
      break;
    case 4:
      description = "<strong>Eigenvalues</strong><br>Eigenvalues are measurable quantities associated with eigenstates. They take on discrete or quantized values, such as position, spin, and energy.";
      break;
    case 5:
      description = "<strong>Measurement</strong><br>Observing a quantum system collapses it into an eigenstate. The measured value is the corresponding eigenvalue. The probability of measuring a specific eigenvalue depends on the system's state.";
      break;
    case 6:
      description = "<strong>Examples</strong><br>Let's look at some real-world examples of eigenvalues and eigenstates, such as position, spin, and energy.";
      break;
    case 7:
      description = "<strong>Conclusion</strong><br>We have explored key concepts in quantum physics, including observable states, eigenstates, eigenvalue equations, eigenvalues, and measurement.";
      break;
  }
  descriptionDiv.html(description);
}
</script>
</body>
</html>
